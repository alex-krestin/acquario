//**********************************************////**	WATER BUBBLES	V2			 	  	  **////**	+ BUBBLE CLASS				  		  **////**										  **////**		by Andrea Baroni (bluegestalt) 	  **////**	  == www.andrea.baroni.name ==	  	  **////**********************************************////**********************************************////BUBBLE CLASSpackage{	import flash.display.MovieClip;import flash.events.*;import flash.filters.BlurFilter;	//----------------------------------	//----------------------------------	public class Bubble extends MovieClip	//----------------------------------	{		private var generator:MovieClip;				//bubble attributes		private var movementMode = 1;		private var ineractive = false;		private var blendType = "normal";		private var scale = 100;		private var speed = 1;		private var currentAlpha = 50;		private var oscspeed = 30;		private var angle = 0;		private var hFlow = 0;				private var finalY = 0;		private var xLimit = 200;		private var maxspeed = 5;		private var maxoscspeed = 30;		private var oscAmount = 1;		private var minScale = 10;		private var maxScale = 90;		private var minAlpha = 20;		private var maxAlpha = 100;		private var topFadeMargin = 50;			private var bottomFadeMargin = 30;				private var focusEffect = true;				private var blurValue = 0;		private var blurred:BlurFilter;		private var storedBlur:Array;						//---------------------------------------		public function Bubble(gen:MovieClip, mov:int, i:Boolean, bT:String, fY:Number, xL:Number, ms:Number, hF:Number, os:Number, oa:Number, mins:Number, maxs:Number, mina:Number, maxa:Number, topm:Number, bottomm:Number, fe:Boolean)		//---------------------------------------		{			generator = gen;						movementMode = mov;						ineractive = i;						blendType = bT;						finalY = fY;						xLimit = xL;						maxspeed = ms;						hFlow = hF;						maxoscspeed = os;					oscAmount = oa;						minScale = mins;			maxScale = maxs;						minAlpha = mina;			maxAlpha = maxa;						topFadeMargin = topm;			bottomFadeMargin = bottomm;						focusEffect = fe;						StartBubble();						generator.addChild(this);						this.addEventListener(Event.ENTER_FRAME,updateBubble);						if (ineractive)				this.addEventListener(MouseEvent.CLICK,bubbleClicked);		}								//---------------------------------------		public function changeBubbleParameters(mov:int, i:Boolean, bT:String, fY:Number, xL:Number, ms:Number, hF:Number, os:Number, oa:Number, mins:Number, maxs:Number, mina:Number, maxa:Number, topm:Number, bottomm:Number, fe:Boolean)		//---------------------------------------		{			movementMode = mov;						ineractive = i;						blendType = bT;						maxspeed = ms;						hFlow = hF;						maxoscspeed = os;					oscAmount = oa;						minScale = mins;			maxScale = maxs;						minAlpha = mina;			maxAlpha = maxa;						topFadeMargin = topm;			bottomFadeMargin = bottomm;						focusEffect = fe;						finalY = fY;						xLimit = xL;						//correct finalY in case < 0 and set it to stage height			if (finalY<=0) finalY = generator.stage.stageHeight - topFadeMargin;						//correct xLimit in case < 0 and set it to stage height			if (xLimit<=0) xLimit = generator.stage.stageWidth;						if (ineractive)				this.addEventListener(MouseEvent.CLICK,bubbleClicked);		}						//---------------------------------------		private function StartBubble()		//---------------------------------------		{			//correct finalY in case < 0 and set it to stage height			if (finalY<=0) finalY = generator.stage.stageHeight - topFadeMargin;						//correct xLimit in case < 0 and set it to stage height			if (xLimit<=0) xLimit = generator.stage.stageWidth;									//put bubble at the bottom			this.y = 0;						switch(movementMode)			{				case -1: //INLINE					this.x = 0;					angle = 0;				break;				case 0: //CLASSIC					//define the x randomly (between 0 and xLimit)					this.x = Math.round(Math.random()*xLimit)-(xLimit*0.5);					angle = 0;				break;				case 1: //SPREAD					this.x = 0;					//define a random angle for the bubble direction (between -30 and 30)					angle = Math.random()*1.0-0.5;				break;			}										//define the scale randomly			scale = Math.random()*maxScale;			if (scale<minScale) scale=minScale;			this.scaleX = scale;			this.scaleY = scale;						//define the speed depending on scale and maxspeed (smaller=faster)			speed = maxspeed/scale*0.5;						//define oscillation speed randomly			oscspeed = Math.round(Math.random()*maxoscspeed)+20;						//define blur depending of scale and random			if (focusEffect)			{				if (scale>1.1) blurValue = scale*5;				if (scale<0.8) blurValue = (1.0/scale)*0.5;				if (blurValue>0)				{					blurred = new BlurFilter(blurValue, blurValue, 2);					storedBlur = [blurred];					this.filters = storedBlur;				}			}						//define alpha randomly			currentAlpha = Math.random()*maxAlpha;			if (currentAlpha<minAlpha) currentAlpha = minAlpha;			this.alpha = 0;						this.blendMode = blendType;		}						//---------------------------------------		private function updateBubble(e:Event)		//---------------------------------------		{			//move bubble			this.y -= Math.cos(angle)*speed;			this.x += Math.sin(angle)*speed;						//horizontal flow			this.x += hFlow;						//oscillate on the x			this.x = this.x + Math.sin(this.y/oscspeed)*oscAmount;						//check alpha for fading			if (this.y<-finalY+topFadeMargin && topFadeMargin!=0)			{				//decrease alpha after topFadeMargin				this.alpha = (this.y+finalY)*currentAlpha/topFadeMargin;			}			if (this.y<0 && this.y>-bottomFadeMargin && bottomFadeMargin!=0)			{				//incrase alpha before bottomFadeMargin				this.alpha = (this.y*currentAlpha)/-bottomFadeMargin;			}			if ( bottomFadeMargin==0) this.alpha = currentAlpha;						//re-initialize the bubble if is gone away from the top			if (this.y<-finalY) StartBubble();		}								//---------------------------------------		private function bubbleClicked(e:MouseEvent)		//---------------------------------------		{			this.gotoAndPlay("pop");						this.removeEventListener(MouseEvent.CLICK,bubbleClicked);							this.addEventListener(Event.ENTER_FRAME,checkPop);		}						//---------------------------------------		private function checkPop(e:Event)		//---------------------------------------		{			if (this.currentLabel=="popped")			{				this.removeEventListener(Event.ENTER_FRAME,checkPop);								//start normal loop animation				this.gotoAndPlay("loop");							if (ineractive)					this.addEventListener(MouseEvent.CLICK,bubbleClicked);								//restart bubble				StartBubble();			}					}					}	}